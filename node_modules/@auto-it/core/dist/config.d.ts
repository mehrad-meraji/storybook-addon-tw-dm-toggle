import { ILogger } from "./utils/logger";
import { ILabelDefinition } from "./semver";
export declare const DEFAULT_PRERELEASE_BRANCHES: string[];
declare type ConfigObject = any;
/** Transform all types of label configuration into just 1 shape */
export declare function normalizeLabel(label: Partial<ILabelDefinition>): Partial<ILabelDefinition>;
/**
 * Go through all the labels in a config and make them
 * follow the same format.
 */
export declare function normalizeLabels(config: ConfigObject): ILabelDefinition[];
/** Load a user's configuration from the system and resolve any extended config */
export default class Config {
    /** A logger that uses log levels */
    logger: ILogger;
    /** Initialize the config loader */
    constructor(logger: ILogger);
    /**
     * Load the .autorc from the file system, set up defaults, combine with CLI args
     * load the extends property, load the plugins and start the git remote interface.
     */
    loadConfig(): Promise<any>;
    /**
     * Loads a config from a path, package name, or special `auto-config` pattern
     *
     * ex: auto-config-MY_CONFIG
     * ex: @MY_CONFIG/auto-config
     *
     * @param extend - Path or name of config to find
     */
    loadExtendConfig(extend: string): Promise<any>;
    /** Ensure a user's config is not using deprecated options. */
    private checkDeprecated;
}
export {};
//# sourceMappingURL=config.d.ts.map