"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processQueryResult = exports.buildSearchQuery = void 0;
const tslib_1 = require("tslib");
const endent_1 = tslib_1.__importDefault(require("endent"));
/**
 * Generate a GitHub graphql query to find all the commits related
 * to a PR.
 */
function buildSearchQuery(owner, project, commits) {
    const repo = `${owner}/${project}`;
    const query = commits.reduce((q, commit) => {
        const subQuery = `repo:${repo} ${commit}`;
        return endent_1.default `
      ${q}

      hash_${commit}: search(query: "${subQuery}", type: ISSUE, first: 10) {
        edges {
          node {
            ... on PullRequest {
              number
              state
              body
              headRefName
              headRepositoryOwner {
                login
              }
              labels(first: 10) {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    `;
    }, "");
    if (!query) {
        return;
    }
    return `{
    ${query}
    rateLimit {
      limit
      cost
      remaining
      resetAt
    }
  }`;
}
exports.buildSearchQuery = buildSearchQuery;
/** Use the graphql query result to fill in more information about a commit */
function processQueryResult({ owner, sha, result, commitsWithoutPR, prereleaseBranches, }) {
    const hash = sha.split("hash_")[1];
    const commit = commitsWithoutPR.find((commitWithoutPR) => commitWithoutPR.hash === hash);
    if (!commit) {
        return;
    }
    // When matching SHA to PR only take merged into account. You can have
    // multiple open PRs with the same commits, such as in a rebase.
    const prs = result.edges.filter((edge) => edge.node.state === "MERGED");
    const isInPrerelease = result.edges.filter((edge) => prereleaseBranches.includes(edge.node.headRefName) &&
        edge.node.headRepositoryOwner.login === owner);
    if (prs.length) {
        const pr = prs[0].node;
        const labels = pr.labels
            ? pr.labels.edges.map((edge) => edge.node)
            : [];
        commit.pullRequest = {
            number: pr.number,
            body: pr.body,
        };
        commit.labels = [...labels.map((label) => label.name), ...commit.labels];
    }
    else if (!result.edges.length || isInPrerelease.length) {
        commit.labels = ["pushToBaseBranch", ...commit.labels];
    }
    commit.subject = commit.subject.split("\n")[0];
    return commit;
}
exports.processQueryResult = processQueryResult;
//# sourceMappingURL=match-sha-to-pr.js.map