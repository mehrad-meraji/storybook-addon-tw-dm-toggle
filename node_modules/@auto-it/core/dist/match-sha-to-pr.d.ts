import { IExtendedCommit } from "./log-parse";
interface ISearchEdge {
    /** Graphql search node */
    node: {
        /** PR number */
        number: number;
        /** State of the PR */
        state: "MERGED" | "CLOSED" | "OPEN";
        /** Body of the PR */
        body: string;
        /** Name of the branch the PR was made from */
        headRefName: string;
        /** Use of the fork the PR was made from */
        headRepositoryOwner: {
            /** Username of the owner of the fork the PR was made from */
            login: string;
        };
        /** Labels attached to the PR */
        labels: {
            /** Edges of the Query */
            edges: [
                {
                    /** Graphql search node */
                    node: {
                        /** Name of the label */
                        name: string;
                    };
                }
            ];
        };
    };
}
export interface ISearchResult {
    /** Results in the search */
    edges: ISearchEdge[];
}
export declare type ISearchQuery = Record<string, ISearchResult>;
/**
 * Generate a GitHub graphql query to find all the commits related
 * to a PR.
 */
export declare function buildSearchQuery(owner: string, project: string, commits: string[]): string | undefined;
/** Use the graphql query result to fill in more information about a commit */
export declare function processQueryResult({ owner, sha, result, commitsWithoutPR, prereleaseBranches, }: {
    /** The owner of the main fork of the repo to automate releases for */
    owner: string;
    /** The commit sha to process */
    sha: string;
    /** The graphql response for the search query hash */
    result: ISearchResult;
    /** Commits that do not yet have a PR matched to them */
    commitsWithoutPR: IExtendedCommit[];
    /** Branches to treat as pre-releases */
    prereleaseBranches: string[];
}): IExtendedCommit | undefined;
export {};
//# sourceMappingURL=match-sha-to-pr.d.ts.map