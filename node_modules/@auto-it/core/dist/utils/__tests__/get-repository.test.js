"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const exec_promise_1 = tslib_1.__importDefault(require("../exec-promise"));
const get_repository_1 = tslib_1.__importDefault(require("../get-repository"));
const execSpy = exec_promise_1.default;
// @ts-ignore
jest.mock("../exec-promise.ts");
describe("getRepository", () => {
    test("should do nothing without a configured remote", async () => {
        execSpy.mockReturnValueOnce(Promise.resolve(""));
        expect(await get_repository_1.default()).toBeUndefined();
    });
    test("should do nothing if parsing origin fails", async () => {
        execSpy.mockReturnValueOnce(Promise.resolve("foo"));
        expect(await get_repository_1.default()).toBeUndefined();
    });
    test("should return owner/repo if possible", async () => {
        execSpy.mockReturnValueOnce(Promise.resolve("foo/bar"));
        expect(await get_repository_1.default()).toStrictEqual({
            owner: "foo",
            repo: "bar",
        });
    });
});
//# sourceMappingURL=get-repository.test.js.map