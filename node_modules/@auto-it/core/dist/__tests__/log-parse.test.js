"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const log_parse_1 = tslib_1.__importStar(require("../log-parse"));
const make_commit_from_msg_1 = tslib_1.__importDefault(require("./make-commit-from-msg"));
describe("parsePR", () => {
    test("should do nothing without merge commit", () => {
        const commit = make_commit_from_msg_1.default("Not a merge");
        expect(log_parse_1.parsePR(commit)).toStrictEqual(commit);
    });
    test("should parse number base and comment", () => {
        const commit = make_commit_from_msg_1.default("Merge pull request #1234 from Another PR\nComments about the PR");
        expect(log_parse_1.parsePR(commit)).toStrictEqual(Object.assign(Object.assign({}, commit), { pullRequest: {
                number: 1234,
                base: "Another PR",
            }, subject: "Comments about the PR" }));
    });
});
describe("parseSquashPR", () => {
    test("should do nothing squash merge commit", () => {
        const commit = make_commit_from_msg_1.default("Not a squash");
        expect(log_parse_1.parseSquashPR(commit)).toStrictEqual(commit);
    });
    test("should parse PR number and comment", () => {
        const commit = make_commit_from_msg_1.default("Some Message (#1234)");
        expect(log_parse_1.parseSquashPR(commit)).toStrictEqual(Object.assign(Object.assign({}, commit), { pullRequest: {
                number: 1234,
            }, subject: "Some Message" }));
    });
});
describe("normalizeCommits", () => {
    test("should do nothing with normal commits", async () => {
        const logParse = new log_parse_1.default();
        const commits = [
            make_commit_from_msg_1.default("First"),
            make_commit_from_msg_1.default("Second"),
            make_commit_from_msg_1.default("Third"),
        ];
        expect(await logParse.normalizeCommits(commits)).toMatchSnapshot();
    });
    test("should strip whitespace in subject", async () => {
        const logParse = new log_parse_1.default();
        const commits = [
            make_commit_from_msg_1.default("First                     PR"),
            make_commit_from_msg_1.default("Second\t PR"),
        ];
        expect(await logParse.normalizeCommits(commits)).toMatchSnapshot();
    });
});
//# sourceMappingURL=log-parse.test.js.map