"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const auto_1 = require("../auto");
const logger_1 = require("../utils/logger");
jest.mock("env-ci", () => () => ({ pr: 123 }));
const defaults = {
    owner: "foo",
    repo: "bar",
};
process.env.GH_TOKEN = "XXXX";
jest.mock("@octokit/rest", () => {
    var _a;
    const Octokit = (_a = class MockOctokit {
            constructor() {
                this.authenticate = () => undefined;
                this.repos = {
                    get: jest.fn().mockReturnValue({}),
                };
                this.hook = {
                    error: () => undefined,
                };
            }
        },
        _a.plugin = () => Octokit,
        _a);
    return { Octokit };
});
describe("comment", () => {
    test("should find PR number from CI", async () => {
        const auto = new auto_1.Auto(defaults);
        auto.logger = logger_1.dummyLog();
        await auto.loadConfig();
        const createComment = jest.fn();
        auto.git.createComment = createComment;
        await auto.comment({ message: "foo" });
        expect(createComment).toHaveBeenCalled();
    });
});
//# sourceMappingURL=auto-comment.test.js.map