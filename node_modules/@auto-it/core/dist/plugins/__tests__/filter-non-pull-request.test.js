"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const make_commit_from_msg_1 = tslib_1.__importDefault(require("../../__tests__/make-commit-from-msg"));
const make_hooks_1 = require("../../utils/make-hooks");
const filter_non_pull_request_1 = tslib_1.__importDefault(require("../filter-non-pull-request"));
const getPr = jest.fn();
const setup = () => {
    const plugin = new filter_non_pull_request_1.default();
    const hooks = make_hooks_1.makeHooks();
    const logParseHooks = make_hooks_1.makeLogParseHooks();
    plugin.apply({ hooks, git: { getPr } });
    hooks.onCreateLogParse.call({ hooks: logParseHooks });
    return logParseHooks;
};
describe("Filter Non Pull Request Plugin", () => {
    test("should do nothing for non-prs", async () => {
        const hooks = setup();
        const commit = make_commit_from_msg_1.default("foo");
        expect(await hooks.omitCommit.promise(commit)).toBeUndefined();
    });
    test("should not filter bad PR numbers", async () => {
        const hooks = setup();
        const commit = make_commit_from_msg_1.default("foo", { pullRequest: { number: 404 } });
        getPr.mockRejectedValueOnce(new Error("Not Found"));
        expect(await hooks.omitCommit.promise(commit)).toBe(true);
    });
    test("should throw unknown errors", async () => {
        const hooks = setup();
        const commit = make_commit_from_msg_1.default("foo", { pullRequest: { number: 123 } });
        getPr.mockRejectedValueOnce(new Error("Some error"));
        await expect(hooks.omitCommit.promise(commit)).rejects.toBeInstanceOf(Error);
    });
    test("should with no PR return value", async () => {
        const hooks = setup();
        const commit = make_commit_from_msg_1.default("foo", { pullRequest: { number: 123 } });
        getPr.mockReturnValueOnce(Promise.resolve());
        await expect(hooks.omitCommit.promise(commit)).rejects.toBeInstanceOf(Error);
    });
    test("should filter issues", async () => {
        const hooks = setup();
        const commit = make_commit_from_msg_1.default("foo", { pullRequest: { number: 123 } });
        getPr.mockReturnValueOnce(Promise.resolve({ data: {} }));
        expect(await hooks.omitCommit.promise(commit)).toBe(true);
    });
    test("should not filter PRs", async () => {
        const hooks = setup();
        const commit = make_commit_from_msg_1.default("foo", { pullRequest: { number: 123 } });
        getPr.mockReturnValueOnce(Promise.resolve({ data: { pull_request: true } }));
        expect(await hooks.omitCommit.promise(commit)).toBeUndefined();
    });
});
//# sourceMappingURL=filter-non-pull-request.test.js.map