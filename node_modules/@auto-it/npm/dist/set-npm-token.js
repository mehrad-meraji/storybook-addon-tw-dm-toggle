"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegistry = exports.DEFAULT_REGISTRY = void 0;
const tslib_1 = require("tslib");
const env_ci_1 = tslib_1.__importDefault(require("env-ci"));
const path_1 = tslib_1.__importDefault(require("path"));
const registry_url_1 = tslib_1.__importDefault(require("registry-url"));
const url_join_1 = tslib_1.__importDefault(require("url-join"));
const user_home_1 = tslib_1.__importDefault(require("user-home"));
const package_json_utils_1 = require("@auto-it/package-json-utils");
const utils_1 = require("./utils");
const { isCi } = env_ci_1.default();
exports.DEFAULT_REGISTRY = "https://registry.npmjs.org";
/** Get the registry for the project */
const getRegistry = async () => {
    var _a, _b;
    const { publishConfig = {}, name } = await package_json_utils_1.loadPackageJson();
    const lernaJson = utils_1.isMonorepo() ? utils_1.getLernaJson() : undefined;
    let registry;
    if (publishConfig.registry) {
        registry = publishConfig.registry;
    }
    else if ((_b = (_a = lernaJson === null || lernaJson === void 0 ? void 0 : lernaJson.command) === null || _a === void 0 ? void 0 : _a.publish) === null || _b === void 0 ? void 0 : _b.registry) {
        registry = lernaJson.command.publish.registry;
    }
    else if (name === null || name === void 0 ? void 0 : name.startsWith("@")) {
        const scope = name.split(`/`)[0];
        registry = registry_url_1.default(scope);
    }
    else {
        registry = registry_url_1.default();
    }
    return registry;
};
exports.getRegistry = getRegistry;
/** Set the .npmrc only when in a continuos integration environment */
async function setTokenOnCI(logger) {
    if (!isCi) {
        return;
    }
    const { private: isPrivate } = await package_json_utils_1.loadPackageJson();
    if (isPrivate && !utils_1.isMonorepo()) {
        logger.verbose.info("NPM token not set for private package.");
        return;
    }
    const rc = path_1.default.join(user_home_1.default, ".npmrc");
    let contents = "";
    try {
        contents = (await utils_1.readFile(rc)).toString();
    }
    catch (error) {
        // No ~/.npmrc set up
    }
    const registry = await exports.getRegistry();
    logger.verbose.note(`Using ${registry} registry for package`);
    const url = registry.replace(/^https?:/, ``);
    // eslint-disable-next-line no-template-curly-in-string
    const authTokenString = url_join_1.default(url, ":_authToken=${NPM_TOKEN}");
    logger.verbose.info(`Will set authentication token string in ${rc}`);
    if (contents.indexOf(authTokenString) !== -1) {
        logger.verbose.success(`npmrc file, ${rc}, is already setup correctly`);
        return;
    }
    logger.verbose.info(`Writing authentication token string, ${authTokenString}, to ${rc}`);
    await utils_1.writeFile(rc, `${contents}\n${authTokenString}`.trim());
    logger.log.success(`Wrote authentication token string to ${rc}`);
}
exports.default = setTokenOnCI;
//# sourceMappingURL=set-npm-token.js.map