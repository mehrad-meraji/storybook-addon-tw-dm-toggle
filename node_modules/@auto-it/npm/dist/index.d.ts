import * as t from "io-ts";
import { Auto, ILogger, IPlugin, InteractiveInit, SEMVER } from "@auto-it/core";
/**
 * Determine the greatest version between @latest published version of a
 * package and the version in the package.json.
 */
export declare function greaterRelease(prefixRelease: (release: string) => string, name: string, packageVersion: string, prereleaseBranch?: string): Promise<string>;
interface IMonorepoPackage {
    /** Path to the monorepo package */
    path: string;
    /** Name to the monorepo package */
    name: string;
    /** Version to the monorepo package */
    version: string;
}
interface GetChangedPackagesArgs {
    /** Commit hash to find changes for */
    sha: string;
    /** All of the packages in the monorepo */
    packages: IMonorepoPackage[];
    /** Whether to add the version to the package name */
    addVersion: boolean;
    /** An "auto" logger to use for loggin */
    logger: ILogger;
    /** The semver bump being applied */
    version?: SEMVER;
}
/**
 * Determine what packages in a monorepo have git changes.
 * We are specifically not using `lerna changed` here because
 * we only care about the package that changed, not what other
 * packages that might effect.
 */
export declare function getChangedPackages({ sha, packages, addVersion, logger, version, }: GetChangedPackagesArgs): Promise<string[]>;
/** Get the package with the greatest version in a monorepo */
export declare function getMonorepoPackage(): IPackageJSON;
declare const pluginOptions: t.PartialC<{
    /** Whether to create sub-package changelogs */
    subPackageChangelogs: t.BooleanC;
    /** Whether to create a commit for "next" version. The default behavior will only create the tags */
    commitNextVersion: t.BooleanC;
    /** Whether to set the npm token on CI */
    setRcToken: t.BooleanC;
    /** Whether to force publish all the packages in a monorepo */
    forcePublish: t.BooleanC;
    /** A scope to publish canary versions under */
    canaryScope: t.StringC;
    /** Publish a monorepo with the lerna --exact flag */
    exact: t.BooleanC;
    /**
     * When publishing packages that require authentication but you are working with an internally
     * hosted NPM Registry that only uses the legacy Base64 version of username:password. This is
     * the same as the NPM publish _auth flag.
     */
    legacyAuth: t.BooleanC;
    /** Whether to add package information to monorepo changelogs */
    monorepoChangelog: t.BooleanC;
    /**
     * Path used when publishing packages.
     * When used with npm this is equivalent to npm publish <publishFolder>
     * When used with lerna this is equivalent to lerna publish --contents <publishFolder>
     */
    publishFolder: t.StringC;
}>;
export declare type INpmConfig = t.TypeOf<typeof pluginOptions>;
/** Publish to NPM. Works in both a monorepo setting and for a single package. */
export default class NPMPlugin implements IPlugin {
    /** The name of the plugin */
    name: string;
    /** Whether to render a changelog like a monorepo's */
    private monorepoChangelog;
    /** the type of release shipit is making */
    private releaseType?;
    /** Whether to create sub-package changelogs */
    private readonly subPackageChangelogs;
    /** Whether to set the npm token in CI */
    private readonly setRcToken;
    /** Whether to always publish all packages in a monorepo */
    private readonly forcePublish;
    /** Publish a monorepo with the lerna --exact flag */
    private readonly exact;
    /** A scope to publish canary versions under */
    private readonly canaryScope;
    /** Whether to use legacy auth for npm */
    private readonly legacyAuth;
    /** Whether to use legacy auth for npm */
    private readonly commitNextVersion;
    /** Path used when publishing packages */
    private readonly publishFolder;
    /** Initialize the plugin with it's options */
    constructor(config?: INpmConfig);
    /** A memoized version of getLernaPackages */
    private getLernaPackages;
    /** Custom initialization for this plugin */
    init(initializer: InteractiveInit): void;
    /** Tap into auto plugin points. */
    apply(auto: Auto): void;
    /** The the NPM token */
    private setTokenOnCI;
}
export {};
//# sourceMappingURL=index.d.ts.map