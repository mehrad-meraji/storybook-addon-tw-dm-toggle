{"version":3,"file":"gitlog.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  execFile,\n  execFileSync,\n  ExecFileSyncOptions,\n  ExecException,\n} from \"child_process\";\nimport { existsSync } from \"fs\";\nimport createDebugger from \"debug\";\n\nconst debug = createDebugger(\"gitlog\");\n\nconst delimiter = \"\\t\";\nconst fieldMap = {\n  hash: \"%H\",\n  abbrevHash: \"%h\",\n  treeHash: \"%T\",\n  abbrevTreeHash: \"%t\",\n  parentHashes: \"%P\",\n  abbrevParentHashes: \"%P\",\n  authorName: \"%an\",\n  authorEmail: \"%ae\",\n  authorDate: \"%ai\",\n  authorDateRel: \"%ar\",\n  committerName: \"%cn\",\n  committerEmail: \"%ce\",\n  committerDate: \"%cd\",\n  committerDateRel: \"%cr\",\n  subject: \"%s\",\n  body: \"%b\",\n  rawBody: \"%B\",\n} as const;\nexport type CommitField = keyof typeof fieldMap;\n\nconst notOptFields = [\"status\", \"files\"] as const;\ntype NotOptField = typeof notOptFields[number];\n\nexport interface FileLineRange {\n  /** Will be pass as -L <startLine>,<endLine>:<file> */\n\n  /** The file to get the commits for */\n  file: string;\n  /** The number of the first line in the desired range */\n  startLine: number;\n  /**\n   * Either the absolute line number for the end of the desired range,\n   * or the offset from the startLine\n   */\n  endLine: number | string;\n}\n\nconst defaultFields = [\n  \"abbrevHash\",\n  \"hash\",\n  \"subject\",\n  \"authorName\",\n  \"authorDate\",\n] as const;\ntype DefaultField = typeof defaultFields[number];\n\nexport interface GitlogOptions<Fields extends string = DefaultField> {\n  /** The location of the repo */\n  repo: string;\n  /**\n   * Much more likely to set status codes to 'C' if files are exact copies of each other.\n   *\n   * @default false\n   */\n  findCopiesHarder?: boolean;\n  /**\n   * Find commits on all branches instead of just on the current one.\n   *\n   * @default false\n   */\n  all?: boolean;\n  /**\n   * Pass the -m option to includes files in a merge commit\n   *\n   * @default false\n   */\n  includeMergeCommitFiles?: boolean;\n  /**\n   * The number of commits to return\n   *\n   * @default 10\n   */\n  number?: number;\n  /** An array of fields to return from the log */\n  fields?: readonly Fields[];\n  /**\n   * Below fields was returned from the log:\n   *\n   * - files - changed files names (array)\n   * - status - changed files status (array)\n   *\n   * @default true\n   */\n  nameStatus?: boolean;\n  /**\n   * Show only commits in the specified branch or revision range.\n   * By default uses the current branch and defaults to HEAD (i.e.\n   * the whole history leading to the current commit).\n   */\n  branch?: string;\n  /** Range of lines for a given file to find the commits for */\n  fileLineRange?: FileLineRange;\n  /** File filter for the git log command */\n  file?: string;\n  /** Limit the commits output to ones with author header lines that match the specified pattern. */\n  author?: string;\n  /** Limit the commits output to ones with committer header lines that match the specified pattern. */\n  committer?: string;\n  /** Show commits more recent than a specific date. */\n  since?: string;\n  /** Show commits more recent than a specific date. */\n  after?: string;\n  /** Show commits older than a specific date */\n  until?: string;\n  /** Show commits older than a specific date */\n  before?: string;\n  /** Specify some options to be passed to the .exec() method */\n  execOptions?: ExecFileSyncOptions;\n}\n\nconst defaultOptions = {\n  number: 10,\n  fields: defaultFields,\n  nameStatus: true,\n  includeMergeCommitFiles: false,\n  findCopiesHarder: false,\n  all: false,\n};\n\n/** Add optional parameter to command */\nfunction addOptionalArguments<Field extends string = DefaultField>(\n  command: string[],\n  options: GitlogOptions<Field>\n) {\n  let commandWithOptions = command;\n  const cmdOptional = [\n    \"author\",\n    \"since\",\n    \"after\",\n    \"until\",\n    \"before\",\n    \"committer\",\n  ] as const;\n\n  for (let i = cmdOptional.length; i--; ) {\n    if (options[cmdOptional[i]]) {\n      commandWithOptions.push(`--${cmdOptional[i]}=${options[cmdOptional[i]]}`);\n    }\n  }\n\n  return commandWithOptions;\n}\n\n/** Parse the output of \"git log\" for commit information */\nconst parseCommits = <T extends string>(\n  commits: string[],\n  fields: readonly T[],\n  nameStatus: boolean\n) => {\n  type Commit = Record<T | NotOptField, any>;\n\n  return commits.map((rawCommit) => {\n    const parts = rawCommit.split(\"@end@\");\n    const commit = parts[0].split(delimiter);\n\n    if (parts[1]) {\n      const parseNameStatus = parts[1].trimLeft().split(\"\\n\");\n\n      // Removes last empty char if exists\n      if (parseNameStatus[parseNameStatus.length - 1] === \"\") {\n        parseNameStatus.pop();\n      }\n\n      // Split each line into it's own delimited array\n      const nameAndStatusDelimited = parseNameStatus.map((d) =>\n        d.split(delimiter)\n      );\n\n      // 0 will always be status, last will be the filename as it is in the commit,\n      // anything in between could be the old name if renamed or copied\n      nameAndStatusDelimited.forEach((item) => {\n        const status = item[0];\n        const tempArr = [status, item[item.length - 1]];\n\n        // If any files in between loop through them\n        for (let i = 1, len = item.length - 1; i < len; i++) {\n          // If status R then add the old filename as a deleted file + status\n          // Other potentials are C for copied but this wouldn't require the original deleting\n          if (status.slice(0, 1) === \"R\") {\n            tempArr.push(\"D\", item[i]);\n          }\n        }\n\n        commit.push(...tempArr);\n      });\n    }\n\n    debug(\"commit\", commit);\n\n    // Remove the first empty char from the array\n    commit.shift();\n\n    const parsed: Partial<Commit> = {};\n\n    if (nameStatus) {\n      // Create arrays for non optional fields if turned on\n      notOptFields.forEach((d) => {\n        parsed[d] = [];\n      });\n    }\n\n    commit.forEach((commitField, index) => {\n      if (fields[index]) {\n        parsed[fields[index]] = commitField;\n      } else if (nameStatus) {\n        const pos = (index - fields.length) % notOptFields.length;\n\n        debug(\n          \"nameStatus\",\n          index - fields.length,\n          notOptFields.length,\n          pos,\n          commitField\n        );\n\n        const arr = parsed[notOptFields[pos]];\n\n        if (Array.isArray(arr)) {\n          arr.push(commitField);\n        }\n      }\n    });\n\n    return parsed as Commit;\n  });\n};\n\n/** Run \"git log\" and return the result as JSON */\nfunction createCommandArguments<\n  T extends CommitField | DefaultField = DefaultField\n>(options: GitlogOptions<T>) {\n  // Start constructing command\n  let command: string[] = [\"log\", \"-l0\"];\n\n  if (options.findCopiesHarder) {\n    command.push(\"--find-copies-harder\");\n  }\n\n  if (options.all) {\n    command.push(\"--all\");\n  }\n\n  if (options.includeMergeCommitFiles) {\n    command.push(\"-m\");\n  }\n\n  command.push(`-n ${options.number}`);\n\n  command = addOptionalArguments(command, options);\n\n  // Start of custom format\n  let prettyArgument: string = \"--pretty=@begin@\";\n\n  // Iterating through the fields and adding them to the custom format\n  if (options.fields) {\n    options.fields.forEach((field) => {\n      if (!fieldMap[field] && !notOptFields.includes(field as any)) {\n        throw new Error(`Unknown field: ${field}`);\n      }\n\n      prettyArgument += delimiter + fieldMap[field];\n    });\n  }\n\n  // Close custom format\n  prettyArgument += \"@end@\";\n  command.push(prettyArgument);\n\n  // Append branch (revision range) if specified\n  if (options.branch) {\n    command.push(options.branch);\n  }\n\n  // File and file status\n  if (options.nameStatus && !options.fileLineRange) {\n    command.push(\"--name-status\");\n  }\n\n  if (options.fileLineRange) {\n    command.push(\n      `-L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`\n    );\n  }\n\n  if (options.file) {\n    command.push(\"--\");\n    command.push(options.file);\n  }\n\n  debug(\"command\", options.execOptions, command);\n\n  return command;\n}\n\ntype GitlogError = ExecException | string | null;\n\ntype CommitBase<Field extends string> = Record<Field, string>;\ntype CommitBaseWithFiles<Field extends string> = Record<\n  Field | \"status\",\n  string\n> & { files: string[] };\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false },\n  cb: (err: GitlogError, commits: CommitBase<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb: (err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false }\n): CommitBase<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>\n): CommitBaseWithFiles<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb?:\n    | ((err: GitlogError, commits: CommitBase<Field>[]) => void)\n    | ((err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void)\n): CommitBase<Field>[] | CommitBaseWithFiles<Field>[] | void {\n  if (!userOptions.repo) {\n    throw new Error(\"Repo required!\");\n  }\n\n  if (!existsSync(userOptions.repo)) {\n    throw new Error(\"Repo location does not exist\");\n  }\n\n  // Set defaults\n  const options = {\n    ...(defaultOptions as any),\n    ...userOptions,\n  };\n  const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\n  const commandArguments = createCommandArguments(options);\n\n  if (!cb) {\n    const stdout = execFileSync(\n      \"git\",\n      commandArguments,\n      execOptions\n    ).toString();\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n    return parseCommits(commits, options.fields, options.nameStatus);\n  }\n\n  execFile(\"git\", commandArguments, execOptions, (err, stdout, stderr) => {\n    debug(\"stdout\", stdout);\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n\n    cb(\n      stderr || err,\n      parseCommits(commits, options.fields, options.nameStatus)\n    );\n  });\n}\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field> & { nameStatus: false }\n): Promise<CommitBase<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBaseWithFiles<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBase<Field>[]> {\n  return new Promise((resolve, reject) => {\n    gitlog(options, (err, commits) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(commits);\n      }\n    });\n  });\n}\n\nexport default gitlog;\n"],"names":["debug","createDebugger","delimiter","fieldMap","hash","abbrevHash","treeHash","abbrevTreeHash","parentHashes","abbrevParentHashes","authorName","authorEmail","authorDate","authorDateRel","committerName","committerEmail","committerDate","committerDateRel","subject","body","rawBody","notOptFields","defaultFields","defaultOptions","number","fields","nameStatus","includeMergeCommitFiles","findCopiesHarder","all","addOptionalArguments","command","options","commandWithOptions","cmdOptional","i","length","push","parseCommits","commits","map","rawCommit","parts","split","commit","parseNameStatus","trimLeft","pop","nameAndStatusDelimited","d","forEach","item","status","tempArr","len","slice","shift","parsed","commitField","index","pos","arr","Array","isArray","createCommandArguments","prettyArgument","field","includes","Error","branch","fileLineRange","startLine","endLine","file","execOptions","gitlog","userOptions","cb","repo","existsSync","cwd","commandArguments","stdout","execFileSync","toString","execFile","err","stderr","gitlogPromise","Promise","resolve","reject"],"mappings":"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"}