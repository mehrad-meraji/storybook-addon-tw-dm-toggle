import{defaultStaticDirs,parseStaticDir,useStatics}from"./chunk-VZQTB33L.mjs";import{__require}from"./chunk-R4NKYYJA.mjs";import{getPreviewHeadTemplate,getPreviewBodyTemplate}from"@storybook/core-common";import chalk4 from"chalk";import{copy,emptyDir,ensureDir}from"fs-extra";import{dirname,isAbsolute,join,resolve}from"path";import{dedent as dedent2}from"ts-dedent";import{global as global2}from"@storybook/global";import{logger as logger4}from"@storybook/node-logger";import{telemetry,getPrecedingUpgrade}from"@storybook/telemetry";import{loadAllPresets,loadMainConfig,logConfig,normalizeStories,resolveAddonName}from"@storybook/core-common";import isEqual from"lodash/isEqual.js";import{stringifyStream}from"@discoveryjs/json-ext";import{logger}from"@storybook/node-logger";import chalk from"chalk";import fs from"fs-extra";import path from"path";async function outputStats(directory,previewStats,managerStats){if(previewStats){let filePath=await writeStats(directory,"preview",previewStats);logger.info(`=> preview stats written to ${chalk.cyan(filePath)}`)}if(managerStats){let filePath=await writeStats(directory,"manager",managerStats);logger.info(`=> manager stats written to ${chalk.cyan(filePath)}`)}}var writeStats=async(directory,name,stats)=>{let filePath=path.join(directory,`${name}-stats.json`),{chunks,...data}=stats.toJson();return await new Promise((resolve3,reject)=>{stringifyStream(data,null,2).on("error",reject).pipe(fs.createWriteStream(filePath)).on("error",reject).on("finish",resolve3)}),filePath};import chalk2 from"chalk";import fs2 from"fs-extra";import path2 from"path";import{logger as logger2}from"@storybook/node-logger";import{getDirectoryFromWorkingDir}from"@storybook/core-common";async function copyAllStaticFiles(staticDirs,outputDir){staticDirs&&staticDirs.length>0&&await Promise.all(staticDirs.map(async dir=>{try{let{staticDir,staticPath,targetDir}=await parseStaticDir(dir),targetPath=path2.join(outputDir,targetDir);logger2.info(chalk2`=> Copying static files: {cyan ${staticDir}} => {cyan ${targetDir}}`);let skipPaths=["index.html","iframe.html"].map(f=>path2.join(targetPath,f));await fs2.copy(staticPath,targetPath,{dereference:!0,preserveTimestamps:!0,filter:(_,dest)=>!skipPaths.includes(dest)})}catch(e){logger2.error(e.message),process.exit(-1)}}))}async function copyAllStaticFilesRelativeToMain(staticDirs,outputDir,configDir){let workingDir=process.cwd();return staticDirs.reduce(async(acc,dir)=>{await acc;let staticDirAndTarget=typeof dir=="string"?dir:`${dir.from}:${dir.to}`,{staticPath:from,targetEndpoint:to}=await parseStaticDir(getDirectoryFromWorkingDir({configDir,workingDir,directory:staticDirAndTarget})),targetPath=path2.join(outputDir,to),skipPaths=["index.html","iframe.html"].map(f=>path2.join(targetPath,f));logger2.info(chalk2`=> Copying static files: {cyan ${from}} at {cyan ${targetPath}}`),await fs2.copy(from,targetPath,{dereference:!0,preserveTimestamps:!0,filter:(_,dest)=>!skipPaths.includes(dest)})},Promise.resolve())}import{pathToFileURL}from"url";async function getManagerBuilder(){return import("@storybook/builder-manager")}async function getPreviewBuilder(builderName,configDir){let builderPackage;if(builderName)builderPackage=__require.resolve(["webpack5"].includes(builderName)?`@storybook/builder-${builderName}`:builderName,{paths:[configDir]});else throw new Error("no builder configured!");return await import(pathToFileURL(builderPackage).href)}async function getBuilders({presets,configDir}){let{builder}=await presets.apply("core",{}),builderName=typeof builder=="string"?builder:builder?.name;return Promise.all([getPreviewBuilder(builderName,configDir),getManagerBuilder()])}import{writeJSON}from"fs-extra";import debounce from"lodash/debounce.js";import{STORY_INDEX_INVALIDATED}from"@storybook/core-events";import Watchpack from"watchpack";function slash(path6){return/^\\\\\?\\/.test(path6)?path6:path6.replace(/\\/g,"/")}import fs3 from"fs";import path3 from"path";import glob from"globby";import uniq from"lodash/uniq.js";var isDirectory=directory=>{try{return fs3.lstatSync(directory).isDirectory()}catch{return!1}};function toImportPath(relativePath){return relativePath.startsWith(".")?relativePath:`./${relativePath}`}function watchStorySpecifiers(specifiers,options,onInvalidate){let wp=new Watchpack({followSymlinks:!1,ignored:["**/.git","node_modules"]});wp.watch({directories:uniq(specifiers.map(ns=>ns.directory))});async function onChangeOrRemove(watchpackPath,removed){let importPath=slash(watchpackPath.startsWith(".")?watchpackPath:`./${watchpackPath}`),matchingSpecifier=specifiers.find(ns=>ns.importPathMatcher.exec(importPath));if(matchingSpecifier){onInvalidate(matchingSpecifier,importPath,removed);return}let absolutePath=path3.join(options.workingDir,importPath);!removed&&isDirectory(absolutePath)&&await Promise.all(specifiers.filter(specifier=>importPath.startsWith(specifier.directory)).map(async specifier=>{let dirGlob=path3.join(options.workingDir,importPath,"**",path3.basename(specifier.files));(await glob(slash(dirGlob))).forEach(filePath=>{let fileImportPath=toImportPath(path3.relative(options.workingDir,filePath).replace(/\\/g,"/"));specifier.importPathMatcher.exec(fileImportPath)&&onInvalidate(specifier,fileImportPath,removed)})}))}return wp.on("change",async(filePath,mtime,explanation)=>{await onChangeOrRemove(filePath,!mtime)}),wp.on("remove",async(filePath,explanation)=>{await onChangeOrRemove(filePath,!0)}),()=>wp.close()}var DEBOUNCE=100;async function extractStoriesJson(outputFile,initializedStoryIndexGenerator,transform){let storyIndex=await(await initializedStoryIndexGenerator).getIndex();await writeJSON(outputFile,transform?transform(storyIndex):storyIndex)}function useStoriesJson({router:router2,initializedStoryIndexGenerator,workingDir=process.cwd(),serverChannel,normalizedStories}){let maybeInvalidate=debounce(()=>serverChannel.emit(STORY_INDEX_INVALIDATED),DEBOUNCE,{leading:!0});watchStorySpecifiers(normalizedStories,{workingDir},async(specifier,path6,removed)=>{(await initializedStoryIndexGenerator).invalidate(specifier,path6,removed),maybeInvalidate()}),router2.use("/index.json",async(req,res)=>{try{let index=await(await initializedStoryIndexGenerator).getIndex();res.header("Content-Type","application/json"),res.send(JSON.stringify(index))}catch(err){res.status(500),res.send(err.toString())}}),router2.use("/stories.json",async(req,res)=>{try{let generator=await initializedStoryIndexGenerator,index=convertToIndexV3(await generator.getIndex());res.header("Content-Type","application/json"),res.send(JSON.stringify(index))}catch(err){res.status(500),res.send(err.toString())}})}var convertToIndexV3=index=>{let{entries}=index;return{v:3,stories:Object.entries(entries).reduce((acc,[id,entry])=>{let{type,...rest}=entry;return acc[id]={...rest,kind:rest.title,story:rest.name,parameters:{__id:rest.id,docsOnly:type==="docs",fileName:rest.importPath}},acc},{})}};import{writeJSON as writeJSON2}from"fs-extra";import{getStorybookMetadata}from"@storybook/telemetry";async function extractStorybookMetadata(outputFile,configDir){let storybookMetadata=await getStorybookMetadata(configDir);await writeJSON2(outputFile,storybookMetadata)}function useStorybookMetadata(router2,configDir){router2.use("/project.json",async(req,res)=>{let storybookMetadata=await getStorybookMetadata(configDir);res.header("Content-Type","application/json"),res.send(JSON.stringify(storybookMetadata))})}import path4 from"path";import chalk3 from"chalk";import fs4 from"fs-extra";import glob2 from"globby";import{userOrAutoTitleFromSpecifier,sortStoriesV7}from"@storybook/preview-api";import{normalizeStoryPath}from"@storybook/core-common";import{logger as logger3,once}from"@storybook/node-logger";import{getStorySortParameter}from"@storybook/csf-tools";import{toId}from"@storybook/csf";import{analyze}from"@storybook/docs-mdx";import dedent from"ts-dedent";import{basename}from"path";function autoName(mdxImportPath,csfImportPath,defaultName){let mdxBasename=basename(mdxImportPath),csfBasename=basename(csfImportPath),[mdxFilename]=mdxBasename.split("."),[csfFilename]=csfBasename.split(".");return mdxFilename===csfFilename?defaultName:mdxFilename}var IndexingError=class extends Error{constructor(message,importPaths,stack){super();this.message=message,this.importPaths=importPaths,stack&&(this.stack=stack)}pathsString(){return this.importPaths.length===1?`${slash(this.importPaths[0])}`:`${this.importPaths.map(slash).join(",")}`}toString(){return`${this.pathsString()}: ${this.message}`}},MultipleIndexingError=class extends Error{constructor(indexingErrors){super();this.indexingErrors=indexingErrors;if(this.indexingErrors.length===0)throw new Error("Unexpected empty error list");if(this.indexingErrors.length===1){let[err]=this.indexingErrors;this.message=`Unable to index ${err.pathsString()}`}else this.message=`Unable to index files:
${this.indexingErrors.map(err=>`- ${err}`).join(`
`)}`}toString(){return this.indexingErrors.length===1?`${this.message}:
  ${this.indexingErrors[0].stack}`:this.message}};var AUTODOCS_TAG="autodocs",STORIES_MDX_TAG="stories-mdx",PLAY_FN_TAG="play-fn";function isMdxEntry({tags}){return!tags?.includes(AUTODOCS_TAG)&&!tags?.includes(STORIES_MDX_TAG)}var makeAbsolute=(otherImport,normalizedPath,workingDir)=>otherImport.startsWith(".")?slash(path4.resolve(workingDir,normalizeStoryPath(path4.join(path4.dirname(normalizedPath),otherImport)))):otherImport,StoryIndexGenerator=class{constructor(specifiers,options){this.specifiers=specifiers;this.options=options;this.specifierToCache=new Map}async initialize(){(await Promise.all(this.specifiers.map(async specifier=>{let pathToSubIndex={},fullGlob=slash(path4.join(this.options.workingDir,specifier.directory,specifier.files)),files=await glob2(fullGlob);return files.length===0&&once.warn(`No story files found for the specified pattern: ${chalk3.blue(path4.join(specifier.directory,specifier.files))}`),files.sort().forEach(absolutePath=>{let ext=path4.extname(absolutePath);if(ext===".storyshot"){let relativePath=path4.relative(this.options.workingDir,absolutePath);logger3.info(`Skipping ${ext} file ${relativePath}`);return}pathToSubIndex[absolutePath]=!1}),[specifier,pathToSubIndex]}))).forEach(([specifier,cache4])=>this.specifierToCache.set(specifier,cache4)),await this.ensureExtracted()}async updateExtracted(updater,overwrite=!1){await Promise.all(this.specifiers.map(async specifier=>{let entry=this.specifierToCache.get(specifier);return Promise.all(Object.keys(entry).map(async absolutePath=>{if(!(entry[absolutePath]&&!overwrite))try{entry[absolutePath]=await updater(specifier,absolutePath,entry[absolutePath])}catch(err){let relativePath=`.${path4.sep}${path4.relative(this.options.workingDir,absolutePath)}`;entry[absolutePath]={type:"error",err:new IndexingError(err.message,[relativePath],err.stack)}}}))}))}isDocsMdx(absolutePath){return/(?<!\.stories)\.mdx$/i.test(absolutePath)}async ensureExtracted(){return await this.updateExtracted(async(specifier,absolutePath)=>this.isDocsMdx(absolutePath)?!1:this.extractStories(specifier,absolutePath)),await this.updateExtracted(async(specifier,absolutePath)=>this.extractDocs(specifier,absolutePath)),this.specifiers.flatMap(specifier=>{let cache4=this.specifierToCache.get(specifier);return Object.values(cache4).flatMap(entry=>entry?entry.type==="docs"?[entry]:entry.type==="error"?[entry]:entry.entries:[])})}findDependencies(absoluteImports){return[...this.specifierToCache.values()].flatMap(cache4=>Object.entries(cache4).filter(([fileName,cacheEntry])=>!cacheEntry||cacheEntry.type!=="stories"?!1:!!absoluteImports.find(storyImport=>fileName.match(new RegExp(`^${storyImport}(\\.[^.]+)?$`)))).map(([_,cacheEntry])=>cacheEntry))}async extractStories(specifier,absolutePath){let relativePath=path4.relative(this.options.workingDir,absolutePath),entries=[],importPath=slash(normalizeStoryPath(relativePath)),makeTitle=userTitle=>userOrAutoTitleFromSpecifier(importPath,specifier,userTitle),storyIndexer=this.options.storyIndexers.find(indexer=>indexer.test.exec(absolutePath));if(!storyIndexer)throw new Error(`No matching story indexer found for ${absolutePath}`);let csf=await storyIndexer.indexer(absolutePath,{makeTitle}),componentTags=csf.meta.tags||[];if(csf.stories.forEach(({id,name,tags:storyTags,parameters})=>{if(!parameters?.docsOnly){let tags=[...storyTags||componentTags,"story"];entries.push({id,title:csf.meta.title,name,importPath,tags,type:"story"})}}),csf.stories.length){let{autodocs}=this.options.docs,componentAutodocs=componentTags.includes(AUTODOCS_TAG),autodocsOptedIn=autodocs===!0||autodocs==="tag"&&componentAutodocs;if(componentTags.includes(STORIES_MDX_TAG)||autodocsOptedIn){let name=this.options.docs.defaultName,id=toId(csf.meta.title,name);entries.unshift({id,title:csf.meta.title,name,importPath,type:"docs",tags:[...componentTags,"docs",...autodocsOptedIn&&!componentAutodocs?[AUTODOCS_TAG]:[]],storiesImports:[]})}}return{entries,type:"stories",dependents:[]}}async extractDocs(specifier,absolutePath){let relativePath=path4.relative(this.options.workingDir,absolutePath);try{if(!this.options.storyStoreV7)throw new Error("You cannot use `.mdx` files without using `storyStoreV7`.");let normalizedPath=normalizeStoryPath(relativePath),importPath=slash(normalizedPath),content=await fs4.readFile(absolutePath,"utf8"),result=analyze(content);if(result.isTemplate)return!1;let absoluteImports=result.imports.map(p=>makeAbsolute(p,normalizedPath,this.options.workingDir)),dependencies=this.findDependencies(absoluteImports),csfEntry;if(result.of){let absoluteOf=makeAbsolute(result.of,normalizedPath,this.options.workingDir);if(dependencies.forEach(dep=>{if(dep.entries.length>0){let first=dep.entries.find(e=>e.type!=="docs");path4.normalize(path4.resolve(this.options.workingDir,first.importPath)).startsWith(path4.normalize(absoluteOf))&&(csfEntry=first)}}),!csfEntry)throw new Error(dedent`Could not find CSF file at path "${result.of}" referenced by \`of={}\` in docs file "${relativePath}".
            
              - Does that file exist?
              - If so, is it a CSF file (\`.stories.*\`)?
              - If so, is it matched by the \`stories\` glob in \`main.js\`?`)}dependencies.forEach(dep=>{dep.dependents.push(absolutePath)});let title=csfEntry?.title||userOrAutoTitleFromSpecifier(importPath,specifier,result.title),{defaultName}=this.options.docs,name=result.name||(csfEntry?autoName(importPath,csfEntry.importPath,defaultName):defaultName);return{id:toId(title,name),title,name,importPath,storiesImports:dependencies.map(dep=>dep.entries[0].importPath),type:"docs",tags:[...result.tags||[],"docs"]}}catch(err){throw err.source?.match(/mdast-util-mdx-jsx/g)&&logger3.warn(`\u{1F4A1} This seems to be an MDX2 syntax error. Please refer to the MDX section in the following resource for assistance on how to fix this: ${chalk3.yellow("https://storybook.js.org/migration-guides/7.0")}`),err}}chooseDuplicate(firstEntry,secondEntry){if(firstEntry.importPath===secondEntry.importPath)return firstEntry;let firstIsBetter=!0;(secondEntry.type==="story"||isMdxEntry(secondEntry)&&firstEntry.type==="docs"&&!isMdxEntry(firstEntry))&&(firstIsBetter=!1);let betterEntry=firstIsBetter?firstEntry:secondEntry,worseEntry=firstIsBetter?secondEntry:firstEntry,changeDocsName='Use `<Meta of={} name="Other Name">` to distinguish them.';if(worseEntry.type==="story")throw new IndexingError(`Duplicate stories with id: ${firstEntry.id}`,[firstEntry.importPath,secondEntry.importPath]);if(betterEntry.type==="story"){let worseDescriptor=isMdxEntry(worseEntry)?"component docs page":"automatically generated docs page";throw betterEntry.name===this.options.docs.defaultName?new IndexingError(`You have a story for ${betterEntry.title} with the same name as your default docs entry name (${betterEntry.name}), so the docs page is being dropped. Consider changing the story name.`,[firstEntry.importPath,secondEntry.importPath]):new IndexingError(`You have a story for ${betterEntry.title} with the same name as your ${worseDescriptor} (${worseEntry.name}), so the docs page is being dropped. ${changeDocsName}`,[firstEntry.importPath,secondEntry.importPath])}else if(isMdxEntry(betterEntry)){if(isMdxEntry(worseEntry))throw new IndexingError(`You have two component docs pages with the same name ${betterEntry.title}:${betterEntry.name}. ${changeDocsName}`,[firstEntry.importPath,secondEntry.importPath]);if(worseEntry.tags?.includes(AUTODOCS_TAG)&&this.options.docs.autodocs!==!0)throw new IndexingError(`You created a component docs page for '${worseEntry.title}', but also tagged the CSF file with '${AUTODOCS_TAG}'. This is probably a mistake.`,[betterEntry.importPath,worseEntry.importPath])}else return{...betterEntry,storiesImports:[...betterEntry.storiesImports,worseEntry.importPath,...worseEntry.storiesImports]};return betterEntry}async sortStories(entries){let sortableStories=Object.values(entries);if(this.options.storyStoreV7){let storySortParameter=await this.getStorySortParameter(),fileNameOrder=this.storyFileNames();sortStoriesV7(sortableStories,storySortParameter,fileNameOrder)}return sortableStories.reduce((acc,item)=>(acc[item.id]=item,acc),{})}async getIndex(){if(this.lastIndex)return this.lastIndex;if(this.lastError)throw this.lastError;let storiesList=await this.ensureExtracted();try{let errorEntries=storiesList.filter(entry=>entry.type==="error");if(errorEntries.length)throw new MultipleIndexingError(errorEntries.map(entry=>entry.err));let duplicateErrors=[],indexEntries={};if(storiesList.forEach(entry=>{try{let existing=indexEntries[entry.id];existing?indexEntries[entry.id]=this.chooseDuplicate(existing,entry):indexEntries[entry.id]=entry}catch(err){duplicateErrors.push(err)}}),duplicateErrors.length)throw new MultipleIndexingError(duplicateErrors);let sorted=await this.sortStories(indexEntries),compat=sorted;if(this.options.storiesV2Compatibility){let titleToStoryCount=Object.values(sorted).reduce((acc,story)=>(acc[story.title]=(acc[story.title]||0)+1,acc),{});compat=Object.entries(sorted).reduce((acc,entry)=>{let[id,story]=entry;return story.type==="docs"||(acc[id]={...story,kind:story.title,story:story.name,parameters:{__id:story.id,docsOnly:titleToStoryCount[story.title]===1&&story.name==="Page",fileName:story.importPath}}),acc},{})}return this.lastIndex={v:4,entries:compat},this.lastIndex}catch(err){throw this.lastError=err,logger3.warn(`\u{1F6A8} ${this.lastError.toString()}`),this.lastError}}invalidate(specifier,importPath,removed){let absolutePath=slash(path4.resolve(this.options.workingDir,importPath)),cache4=this.specifierToCache.get(specifier),cacheEntry=cache4[absolutePath];if(cacheEntry&&cacheEntry.type==="stories"){let{dependents}=cacheEntry,invalidated=new Set;this.specifierToCache.forEach(otherCache=>{dependents.forEach(dep=>{otherCache[dep]&&(invalidated.add(dep),otherCache[dep]=!1)})})}if(removed){if(cacheEntry&&cacheEntry.type==="docs"){let absoluteImports=cacheEntry.storiesImports.map(p=>path4.resolve(this.options.workingDir,p));this.findDependencies(absoluteImports).forEach(dep=>dep.dependents.splice(dep.dependents.indexOf(absolutePath),1))}delete cache4[absolutePath]}else cache4[absolutePath]=!1;this.lastIndex=null,this.lastError=null}async getStorySortParameter(){let previewFile=["js","jsx","ts","tsx","mjs","cjs"].map(ext=>path4.join(this.options.configDir,`preview.${ext}`)).find(fname=>fs4.existsSync(fname)),storySortParameter;if(previewFile){let previewCode=(await fs4.readFile(previewFile,"utf-8")).toString();storySortParameter=await getStorySortParameter(previewCode)}return storySortParameter}storyFileNames(){return Array.from(this.specifierToCache.values()).flatMap(r=>Object.keys(r))}};var PAGE_REGEX=/(page|screen)/i,isPageStory=storyId=>PAGE_REGEX.test(storyId),isExampleEntry=entry=>["example-introduction--docs","example-button--docs","example-button--primary","example-button--secondary","example-button--large","example-button--small","example-header--docs","example-header--logged-in","example-header--logged-out","example-page--logged-in","example-page--logged-out"].includes(entry.id);function summarizeIndex(storyIndex){let storyCount=0,componentTitles=new Set,exampleStoryCount=0,exampleDocsCount=0,pageStoryCount=0,playStoryCount=0,autodocsCount=0,storiesMdxCount=0,mdxCount=0;Object.values(storyIndex.entries).forEach(entry=>{isExampleEntry(entry)?(entry.type==="story"&&(exampleStoryCount+=1),entry.type==="docs"&&(exampleDocsCount+=1)):entry.type==="story"?(storyCount+=1,componentTitles.add(entry.title),isPageStory(entry.title)&&(pageStoryCount+=1),entry.tags?.includes(PLAY_FN_TAG)&&(playStoryCount+=1)):entry.type==="docs"&&(isMdxEntry(entry)?mdxCount+=1:entry.tags?.includes(STORIES_MDX_TAG)?storiesMdxCount+=1:entry.tags?.includes(AUTODOCS_TAG)&&(autodocsCount+=1))});let componentCount=componentTitles.size;return{storyCount,componentCount,pageStoryCount,playStoryCount,autodocsCount,storiesMdxCount,mdxCount,exampleStoryCount,exampleDocsCount,version:storyIndex.v}}async function buildStaticStandalone(options){if(options.configType="PRODUCTION",options.outputDir==="")throw new Error("Won't remove current directory. Check your outputDir!");if(options.staticDir?.includes("/"))throw new Error("Won't copy root directory. Check your staticDirs!");if(options.outputDir=isAbsolute(options.outputDir)?options.outputDir:join(process.cwd(),options.outputDir),options.configDir=resolve(options.configDir),logger4.info(chalk4`=> Cleaning outputDir: {cyan ${options.outputDir.replace(process.cwd(),"")}}`),options.outputDir==="/")throw new Error("Won't remove directory '/'. Check your outputDir!");await emptyDir(options.outputDir),await ensureDir(options.outputDir);let{framework}=await loadMainConfig(options),corePresets=[],frameworkName=typeof framework=="string"?framework:framework?.name;frameworkName?corePresets.push(join(frameworkName,"preset")):logger4.warn(`you have not specified a framework in your ${options.configDir}/main.js`),logger4.info("=> Loading presets");let presets=await loadAllPresets({corePresets:[__require.resolve("@storybook/core-server/dist/presets/common-preset"),...corePresets],overridePresets:[],...options}),[previewBuilder,managerBuilder]=await getBuilders({...options,presets}),{renderer}=await presets.apply("core",{});presets=await loadAllPresets({corePresets:[__require.resolve("@storybook/core-server/dist/presets/common-preset"),...managerBuilder.corePresets||[],...previewBuilder.corePresets||[],...renderer?[resolveAddonName(options.configDir,renderer,options)]:[],...corePresets,__require.resolve("@storybook/core-server/dist/presets/babel-cache-preset")],overridePresets:previewBuilder.overridePresets||[],...options});let[features,core,staticDirs,storyIndexers,stories,docsOptions]=await Promise.all([presets.apply("features"),presets.apply("core"),presets.apply("staticDirs"),presets.apply("storyIndexers",[]),presets.apply("stories"),presets.apply("docs",{})]),fullOptions={...options,presets,features};if(options.staticDir&&!isEqual(staticDirs,defaultStaticDirs))throw new Error(dedent2`
      Conflict when trying to read staticDirs:
      * Storybook's configuration option: 'staticDirs'
      * Storybook's CLI flag: '--staticDir' or '-s'
      
      Choose one of them, but not both.
    `);let effects=[];global2.FEATURES=features,await managerBuilder.build({startTime:process.hrtime(),options:fullOptions}),staticDirs&&effects.push(copyAllStaticFilesRelativeToMain(staticDirs,options.outputDir,options.configDir)),options.staticDir&&effects.push(copyAllStaticFiles(options.staticDir,options.outputDir));let coreServerPublicDir=join(dirname(__require.resolve("@storybook/core-server/package.json")),"public");effects.push(copy(coreServerPublicDir,options.outputDir));let initializedStoryIndexGenerator=Promise.resolve(void 0);if((features?.buildStoriesJson||features?.storyStoreV7)&&!options.ignorePreview){let workingDir=process.cwd(),directories={configDir:options.configDir,workingDir},normalizedStories=normalizeStories(stories,directories),generator=new StoryIndexGenerator(normalizedStories,{...directories,storyIndexers,docs:docsOptions,storiesV2Compatibility:!features?.breakingChangesV7&&!features?.storyStoreV7,storyStoreV7:!!features?.storyStoreV7});initializedStoryIndexGenerator=generator.initialize().then(()=>generator),effects.push(extractStoriesJson(join(options.outputDir,"stories.json"),initializedStoryIndexGenerator,convertToIndexV3)),effects.push(extractStoriesJson(join(options.outputDir,"index.json"),initializedStoryIndexGenerator))}core?.disableProjectJson||effects.push(extractStorybookMetadata(join(options.outputDir,"project.json"),options.configDir)),options.debugWebpack&&logConfig("Preview webpack config",await previewBuilder.getConfig(fullOptions)),options.ignorePreview&&logger4.info("=> Not building preview"),await Promise.all([...options.ignorePreview?[]:[previewBuilder.build({startTime:process.hrtime(),options:fullOptions}).then(async previewStats=>{if(options.webpackStatsJson){let target=options.webpackStatsJson===!0?options.outputDir:options.webpackStatsJson;await outputStats(target,previewStats)}})],...effects]),core?.disableTelemetry||effects.push(initializedStoryIndexGenerator.then(async generator=>{let storyIndex=await generator?.getIndex(),payload={precedingUpgrade:await getPrecedingUpgrade()};storyIndex&&Object.assign(payload,{storyIndex:summarizeIndex(storyIndex)}),await telemetry("build",payload,{configDir:options.configDir})})),logger4.info(`=> Output directory: ${options.outputDir}`)}import{cache as cache3,loadAllPresets as loadAllPresets3,loadMainConfig as loadMainConfig2,resolveAddonName as resolveAddonName2,resolvePathInStorybookCache,validateFrameworkName}from"@storybook/core-common";import prompts2 from"prompts";import{global as global3}from"@storybook/global";import{telemetry as telemetry4}from"@storybook/telemetry";import{join as join2,resolve as resolve2}from"path";import express from"express";import compression from"compression";import{logConfig as logConfig2}from"@storybook/core-common";import path5 from"path";import fs5 from"fs";var fileExists=basename2=>[".js",".cjs"].reduce((found,ext)=>{let filename=`${basename2}${ext}`;return!found&&fs5.existsSync(filename)?filename:found},"");function getMiddleware(configDir){let middlewarePath=fileExists(path5.resolve(configDir,"middleware"));if(middlewarePath){let middlewareModule=__require(middlewarePath);return middlewareModule.__esModule&&(middlewareModule=middlewareModule.default),middlewareModule}return()=>{}}import ip from"ip";import{logger as logger5}from"@storybook/node-logger";import detectFreePort from"detect-port";function getServerAddresses(port,host,proto){return{address:`${proto}://localhost:${port}/`,networkAddress:`${proto}://${host||ip.address()}:${port}/`}}var getServerPort=port=>detectFreePort(port).catch(error=>{logger5.error(error),process.exit(-1)}),getServerChannelUrl=(port,{https:https2})=>`${https2?"wss":"ws"}://localhost:${port}/storybook-server-channel`;import{logger as logger6}from"@storybook/node-logger";import{readFile}from"fs-extra";import http from"http";import https from"https";async function getServer(app,options){if(!options.https)return http.createServer(app);options.sslCert||(logger6.error("Error: --ssl-cert is required with --https"),process.exit(-1)),options.sslKey||(logger6.error("Error: --ssl-key is required with --https"),process.exit(-1));let sslOptions={ca:await Promise.all((options.sslCa||[]).map(ca=>readFile(ca,"utf-8"))),cert:await readFile(options.sslCert,"utf-8"),key:await readFile(options.sslKey,"utf-8")};return https.createServer(sslOptions,app)}import WebSocket,{WebSocketServer}from"ws";import{stringify}from"telejson";var ServerChannel=class{constructor(server){this.webSocketServer=new WebSocketServer({noServer:!0}),server.on("upgrade",(request,socket,head)=>{request.url==="/storybook-server-channel"&&this.webSocketServer.handleUpgrade(request,socket,head,ws=>{this.webSocketServer.emit("connection",ws,request)})})}emit(type,args=[]){let data=stringify({type,args},{maxDepth:15,allowFunction:!0});Array.from(this.webSocketServer.clients).filter(c=>c.readyState===WebSocket.OPEN).forEach(client=>client.send(data))}};function getServerChannel(server){return new ServerChannel(server)}import{logger as logger7}from"@storybook/node-logger";import betterOpn from"better-opn";import open from"open";import getDefaultBrowser from"@aw-web-design/x-default-browser";import{dedent as dedent3}from"ts-dedent";function openInBrowser(address){getDefaultBrowser(async(err,res)=>{try{res&&(res.isChrome||res.isChromium||res.identity==="com.brave.browser")?betterOpn(address):await open(address)}catch{logger7.error(dedent3`
        Could not open ${address} inside a browser. If you're running this command inside a
        docker container or on a CI, you need to pass the '--ci' flag to prevent opening a
        browser by default.
      `)}})}import{normalizeStories as normalizeStories2}from"@storybook/core-common";import{Router}from"express";var router=new Router;async function getStoryIndexGenerator(features,options,serverChannel){let initializedStoryIndexGenerator=Promise.resolve(void 0);if(features?.buildStoriesJson||features?.storyStoreV7){let workingDir=process.cwd(),directories={configDir:options.configDir,workingDir},stories=options.presets.apply("stories"),storyIndexers=options.presets.apply("storyIndexers",[]),docsOptions=options.presets.apply("docs",{}),normalizedStories=normalizeStories2(await stories,directories),generator=new StoryIndexGenerator(normalizedStories,{...directories,storyIndexers:await storyIndexers,docs:await docsOptions,workingDir,storiesV2Compatibility:!features?.breakingChangesV7&&!features?.storyStoreV7,storyStoreV7:features?.storyStoreV7});initializedStoryIndexGenerator=generator.initialize().then(()=>generator),useStoriesJson({router,initializedStoryIndexGenerator,normalizedStories,serverChannel,workingDir})}return initializedStoryIndexGenerator}import{telemetry as telemetry3,getPrecedingUpgrade as getPrecedingUpgrade3}from"@storybook/telemetry";var versionStatus=versionCheck=>versionCheck.error?"error":versionCheck.cached?"cached":"success";import prompts from"prompts";import{loadAllPresets as loadAllPresets2,cache}from"@storybook/core-common";import{telemetry as telemetry2,getPrecedingUpgrade as getPrecedingUpgrade2,oneWayHash}from"@storybook/telemetry";import{logger as logger8}from"@storybook/node-logger";var promptCrashReports=async()=>{if(process.env.CI&&process.env.NODE_ENV!=="test")return;let{enableCrashReports}=await prompts({type:"confirm",name:"enableCrashReports",message:"Would you like to help improve Storybook by sending anonymous crash reports?",initial:!0});return await cache.set("enableCrashReports",enableCrashReports),enableCrashReports};async function getErrorLevel({cliOptions,presetOptions}){if(cliOptions.disableTelemetry)return"none";if(!presetOptions)return"full";let core=await(await loadAllPresets2({corePresets:[__require.resolve("@storybook/core-server/dist/presets/common-preset")],overridePresets:[],...presetOptions})).apply("core");if(core?.enableCrashReports!==void 0)return core.enableCrashReports?"full":"error";if(core?.disableTelemetry)return"none";let valueFromCache=await cache.get("enableCrashReports")??await cache.get("enableCrashreports");if(valueFromCache!==void 0)return valueFromCache?"full":"error";let valueFromPrompt=await promptCrashReports();return valueFromPrompt!==void 0?valueFromPrompt?"full":"error":"full"}async function sendTelemetryError(error,eventType,options){try{let errorLevel="error";try{errorLevel=await getErrorLevel(options)}catch{}if(errorLevel!=="none"){let precedingUpgrade=await getPrecedingUpgrade2();await telemetry2("error",{eventType,precedingUpgrade,error:errorLevel==="full"?error:void 0,errorHash:oneWayHash(error.message||"")},{immediate:!0,configDir:options.cliOptions.configDir||options.presetOptions?.configDir,enableCrashReports:errorLevel==="full"})}}catch{}}async function withTelemetry(eventType,options,run){options.cliOptions.disableTelemetry||telemetry2("boot",{eventType},{stripMetadata:!0});try{return await run()}catch(error){let{printError=logger8.error}=options;throw printError(error),await sendTelemetryError(error,eventType,options),error}}async function doTelemetry(core,initializedStoryIndexGenerator,options){core?.disableTelemetry||initializedStoryIndexGenerator.then(async generator=>{let storyIndex;try{storyIndex=await generator?.getIndex()}catch(err){sendTelemetryError(err,"dev",{cliOptions:options,presetOptions:{...options,corePresets:[],overridePresets:[]}});return}let{versionCheck,versionUpdates}=options,payload={precedingUpgrade:await getPrecedingUpgrade3()};storyIndex&&Object.assign(payload,{versionStatus:versionUpdates?versionStatus(versionCheck):"disabled",storyIndex:summarizeIndex(storyIndex)}),telemetry3("dev",payload,{configDir:options.configDir})}),core?.disableProjectJson||useStorybookMetadata(router,options.configDir)}function getAccessControlMiddleware(crossOriginIsolated){return(req,res,next)=>{res.header("Access-Control-Allow-Origin","*"),res.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),crossOriginIsolated&&(res.header("Cross-Origin-Opener-Policy","same-origin"),res.header("Cross-Origin-Embedder-Policy","require-corp")),next()}}function getCachingMiddleware(){return(req,res,next)=>{res.header("Cache-Control","no-store"),next()}}async function storybookDevServer(options){let app=express(),[server,features,core]=await Promise.all([getServer(app,options),options.presets.apply("features"),options.presets.apply("core")]),serverChannel=getServerChannel(server),indexError,initializedStoryIndexGenerator=getStoryIndexGenerator(features,options,serverChannel).catch(err=>{indexError=err});app.use(compression({level:1})),typeof options.extendServer=="function"&&options.extendServer(server),app.use(getAccessControlMiddleware(core?.crossOriginIsolated)),app.use(getCachingMiddleware()),getMiddleware(options.configDir)(router),app.use(router);let{port,host}=options,proto=options.https?"https":"http",{address,networkAddress}=getServerAddresses(port,host,proto),listening=new Promise((resolve3,reject)=>{server.listen({port,host},error=>error?reject(error):resolve3())}),builderName=typeof core?.builder=="string"?core.builder:core?.builder?.name,[previewBuilder,managerBuilder]=await Promise.all([getPreviewBuilder(builderName,options.configDir),getManagerBuilder(),useStatics(router,options)]);options.debugWebpack&&logConfig2("Preview webpack config",await previewBuilder.getConfig(options));let managerResult=await managerBuilder.start({startTime:process.hrtime(),options,router,server,channel:serverChannel}),previewStarted=Promise.resolve();if(options.ignorePreview||(previewStarted=previewBuilder.start({startTime:process.hrtime(),options,router,server,channel:serverChannel}).catch(async e=>{throw await managerBuilder?.bail().catch(),await previewBuilder?.bail().catch(),e})),router.get("/iframe.html",(req,res,next)=>{previewStarted.catch(()=>{}).then(()=>next())}),await Promise.all([initializedStoryIndexGenerator,listening]).then(async([indexGenerator])=>{indexGenerator&&!options.ci&&!options.smokeTest&&options.open&&openInBrowser(host?networkAddress:address)}),indexError)throw await managerBuilder?.bail().catch(),await previewBuilder?.bail().catch(),indexError;let previewResult=await previewStarted;return doTelemetry(core,initializedStoryIndexGenerator,options),{previewResult,managerResult,address,networkAddress}}import semver from"semver";var getReleaseNotesVersion=version=>{let{major,minor}=semver.parse(version),{version:releaseNotesVersion}=semver.coerce(`${major}.${minor}`);return releaseNotesVersion},getReleaseNotesFailedState=version=>({success:!1,currentVersion:getReleaseNotesVersion(version),showOnFirstLaunch:!1});var getReleaseNotesData=async(currentVersionToParse,fileSystemCache)=>{let result;try{let fromCache=await fileSystemCache.get("releaseNotesData",[]).catch(()=>{})||[],releaseNotesVersion=getReleaseNotesVersion(currentVersionToParse),versionHasNotBeenSeen=!fromCache.includes(releaseNotesVersion);versionHasNotBeenSeen&&await fileSystemCache.set("releaseNotesData",[...fromCache,releaseNotesVersion]);let highestVersionSeenInThePast=semver.sort(fromCache).slice(-1)[0],isUpgrading=!1,isMajorOrMinorDiff=!1;if(highestVersionSeenInThePast){isUpgrading=semver.gt(releaseNotesVersion,highestVersionSeenInThePast);let versionDiff=semver.diff(releaseNotesVersion,highestVersionSeenInThePast);isMajorOrMinorDiff=versionDiff==="major"||versionDiff==="minor"}result={success:!0,showOnFirstLaunch:versionHasNotBeenSeen&&!!highestVersionSeenInThePast&&isUpgrading&&isMajorOrMinorDiff,currentVersion:releaseNotesVersion}}catch{result=getReleaseNotesFailedState(currentVersionToParse)}return result};import chalk6 from"chalk";import{colors as colors2}from"@storybook/node-logger";import boxen from"boxen";import{dedent as dedent5}from"ts-dedent";import Table from"cli-table3";import prettyTime from"pretty-hrtime";import fetch from"node-fetch";import chalk5 from"chalk";import{colors}from"@storybook/node-logger";import semver2 from"semver";import{dedent as dedent4}from"ts-dedent";import{cache as cache2}from"@storybook/core-common";var{STORYBOOK_VERSION_BASE="https://storybook.js.org",CI}=process.env,updateCheck=async version=>{let result,time=Date.now();try{let fromCache=await cache2.get("lastUpdateCheck",{success:!1,time:0});time-864e5>fromCache.time&&!CI?(result={success:!0,cached:!1,data:await(await Promise.race([fetch(`${STORYBOOK_VERSION_BASE}/versions.json?current=${version}`),new Promise((res,rej)=>global.setTimeout(rej,1500))])).json(),time},await cache2.set("lastUpdateCheck",result)):result={...fromCache,cached:!0}}catch(error){result={success:!1,cached:!1,error,time}}return result};function createUpdateMessage(updateInfo,version){let updateMessage;try{let upgradeCommand=`npx storybook@latest upgrade ${semver2.prerelease(updateInfo.data.latest.version)?"--prerelease":""}`.trim();updateMessage=updateInfo.success&&semver2.lt(version,updateInfo.data.latest.version)?dedent4`
          ${colors.orange(`A new version (${chalk5.bold(updateInfo.data.latest.version)}) is available!`)}

          ${chalk5.gray("Upgrade now:")} ${colors.green(upgradeCommand)}

          ${chalk5.gray("Read full changelog:")} ${chalk5.gray.underline("https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md")}
        `:""}catch{updateMessage=""}return updateMessage}function outputStartupInformation(options){let{updateInfo,version,name,address,networkAddress,managerTotalTime,previewTotalTime}=options,updateMessage=createUpdateMessage(updateInfo,version),serveMessage=new Table({chars:{top:"","top-mid":"","top-left":"","top-right":"",bottom:"","bottom-mid":"","bottom-left":"","bottom-right":"",left:"","left-mid":"",mid:"","mid-mid":"",right:"","right-mid":"",middle:""},paddingLeft:0,paddingRight:0,paddingTop:0,paddingBottom:0});serveMessage.push(["Local:",chalk6.cyan(address)],["On your network:",chalk6.cyan(networkAddress)]);let timeStatement=[managerTotalTime&&`${chalk6.underline(prettyTime(managerTotalTime))} for manager`,previewTotalTime&&`${chalk6.underline(prettyTime(previewTotalTime))} for preview`].filter(Boolean).join(" and ");console.log(boxen(dedent5`
          ${colors2.green(`Storybook ${chalk6.bold(version)} for ${chalk6.bold(name)} started`)}
          ${chalk6.gray(timeStatement)}

          ${serveMessage.toString()}${updateMessage?`

${updateMessage}`:""}
        `,{borderStyle:"round",padding:1,borderColor:"#F1618C"}))}async function buildDevStandalone(options){let{packageJson,versionUpdates,releaseNotes}=options,{version}=packageJson,[port,versionCheck,releaseNotesData]=await Promise.all([getServerPort(options.port),versionUpdates?updateCheck(version):Promise.resolve({success:!1,cached:!1,data:{},time:Date.now()}),releaseNotes?getReleaseNotesData(version,cache3):Promise.resolve(getReleaseNotesFailedState(version))]);if(!options.ci&&!options.smokeTest&&options.port!=null&&port!==options.port){let{shouldChangePort}=await prompts2({type:"confirm",initial:!0,name:"shouldChangePort",message:`Port ${options.port} is not available. Would you like to run Storybook on port ${port} instead?`});shouldChangePort||process.exit(1)}options.port=port,options.versionCheck=versionCheck,options.releaseNotesData=releaseNotesData,options.configType="DEVELOPMENT",options.configDir=resolve2(options.configDir),options.outputDir=options.smokeTest?resolvePathInStorybookCache("public"):resolve2(options.outputDir||resolvePathInStorybookCache("public")),options.serverChannelUrl=getServerChannelUrl(port,options);let{framework}=await loadMainConfig2(options),corePresets=[],frameworkName=typeof framework=="string"?framework:framework?.name;validateFrameworkName(frameworkName),corePresets.push(join2(frameworkName,"preset"));let presets=await loadAllPresets3({corePresets,overridePresets:[],...options}),{renderer,builder,disableTelemetry}=await presets.apply("core",{});!options.disableTelemetry&&!disableTelemetry&&versionCheck.success&&!versionCheck.cached&&telemetry4("version-update");let builderName=typeof builder=="string"?builder:builder?.name,[previewBuilder,managerBuilder]=await Promise.all([getPreviewBuilder(builderName,options.configDir),getManagerBuilder()]);presets=await loadAllPresets3({corePresets:[__require.resolve("@storybook/core-server/dist/presets/common-preset"),...managerBuilder.corePresets||[],...previewBuilder.corePresets||[],...renderer?[resolveAddonName2(options.configDir,renderer,options)]:[],...corePresets,__require.resolve("@storybook/core-server/dist/presets/babel-cache-preset")],overridePresets:previewBuilder.overridePresets,...options});let features=await presets.apply("features");global3.FEATURES=features;let fullOptions={...options,presets,features},{address,networkAddress,managerResult,previewResult}=await storybookDevServer(fullOptions),previewTotalTime=previewResult&&previewResult.totalTime,managerTotalTime=managerResult&&managerResult.totalTime,previewStats=previewResult&&previewResult.stats,managerStats=managerResult&&managerResult.stats;if(options.webpackStatsJson){let target=options.webpackStatsJson===!0?options.outputDir:options.webpackStatsJson;await outputStats(target,previewStats)}if(options.smokeTest){let warnings=[];warnings.push(...managerStats?.toJson()?.warnings||[]),warnings.push(...previewStats?.toJson()?.warnings||[]);let problems=warnings.filter(warning=>!warning.message.includes("export 'useInsertionEffect'")).filter(warning=>!warning.message.includes("compilation but it's unused")).filter(warning=>!warning.message.includes("Conflicting values for 'process.env.NODE_ENV'"));console.log(problems.map(p=>p.stack)),process.exit(problems.length>0?1:0)}else{let name=frameworkName.split("@storybook/").length>1?frameworkName.split("@storybook/")[1]:frameworkName;outputStartupInformation({updateInfo:versionCheck,version,name,address,networkAddress,managerTotalTime,previewTotalTime})}return{port,address,networkAddress}}import{sync as readUpSync}from"read-pkg-up";async function build(options={},frameworkOptions={}){let{mode="dev"}=options,{packageJson}=readUpSync({cwd:__dirname}),commonOptions={...options,...frameworkOptions,frameworkPresets:[...options.frameworkPresets||[],...frameworkOptions.frameworkPresets||[]],packageJson};if(mode==="dev")return buildDevStandalone(commonOptions);if(mode==="static")return buildStaticStandalone(commonOptions);throw new Error("'mode' parameter should be either 'dev' or 'static'")}var standalone_default=build;export{standalone_default as build,buildDevStandalone,buildStaticStandalone,getPreviewBodyTemplate,getPreviewHeadTemplate,sendTelemetryError,withTelemetry};
