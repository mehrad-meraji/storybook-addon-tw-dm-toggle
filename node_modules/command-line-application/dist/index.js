"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_line_args_1 = tslib_1.__importDefault(require("command-line-args"));
var command_line_usage_1 = tslib_1.__importDefault(require("command-line-usage"));
var remove_markdown_1 = tslib_1.__importDefault(require("remove-markdown"));
var meant_1 = tslib_1.__importDefault(require("meant"));
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var help = {
    name: 'help',
    alias: 'h',
    description: 'Display the help output',
    type: Boolean,
    group: 'global'
};
/** Options available to all CLIs created with this tool */
exports.globalOptions = [help];
var arrayify = function (x) { return (Array.isArray(x) ? x : [x]); };
var hasGlobal = function (options) {
    return Boolean(options.find(function (option) { return option.group === 'global'; }));
};
function styleTypes(command, option) {
    var isRequired = command.require && command.require.includes(option.name);
    if (isRequired && option.type === Number) {
        option.typeLabel = "{rgb(173, 216, 230) {underline " + (option.typeLabel ||
            'number') + "}} [{rgb(254,91,92) required}]";
    }
    else if (option.type === Number) {
        option.typeLabel = "{rgb(173, 216, 230) {underline " + (option.typeLabel ||
            'number') + "}}";
    }
    if (isRequired && option.type === String) {
        option.typeLabel = "{rgb(173, 216, 230) {underline " + (option.typeLabel ||
            'string') + "}} [{rgb(254,91,92) required}]";
    }
    else if (option.multiple && option.type === String) {
        option.typeLabel = "{rgb(173, 216, 230) {underline " + (option.typeLabel ||
            'string[]') + "}}";
    }
    else if (option.type === String) {
        option.typeLabel = "{rgb(173, 216, 230) {underline " + (option.typeLabel ||
            'string') + "}}";
    }
}
function addFooter(command, sections) {
    if (typeof command.footer === 'string') {
        sections.push({ content: command.footer });
    }
    else if (command.footer) {
        var footers = Array.isArray(command.footer)
            ? command.footer
            : [command.footer];
        footers.forEach(function (f) {
            var content = !('content' in f)
                ? undefined
                : typeof f.content === 'string'
                    ? remove_markdown_1.default(f.code
                        ? f.content
                            .split('\n')
                            .map(function (s) { return (s.includes('```') ? undefined : "| " + s); })
                            .join('\n')
                        : f.content, {
                        stripListLeaders: false
                    })
                    : Array.isArray(f.content)
                        ? f.content
                        : undefined;
            if (typeof content === 'string') {
                content = content.replace(/}/g, '\\}').replace(/{/g, '\\{');
            }
            sections.push(tslib_1.__assign(tslib_1.__assign({}, f), { header: f.header
                    ? remove_markdown_1.default(f.header, { stripListLeaders: false })
                    : undefined, content: content }));
        });
    }
}
var printUsage = function (command) {
    var options = command.options || [];
    var sections = [
        {
            header: command.name,
            content: command.description
        }
    ];
    options.forEach(function (option) {
        styleTypes(command, option);
    });
    if (hasGlobal(options)) {
        sections.push({
            header: 'Options',
            optionList: options.filter(function (o) { return o.group !== 'global'; })
        }, {
            header: 'Global Options',
            optionList: tslib_1.__spreadArrays(options, exports.globalOptions),
            group: 'global'
        });
    }
    else {
        sections.push({
            header: 'Options',
            optionList: tslib_1.__spreadArrays(options, exports.globalOptions)
        });
    }
    if (command.examples) {
        sections.push({
            header: 'Examples',
            content: command.examples
        });
    }
    addFooter(command, sections);
    console.log(command_line_usage_1.default(sections));
    return;
};
var printRootUsage = function (multi) {
    var subCommands = multi.commands.filter(function (c) { return !('isMulti' in c); }) || [];
    var rootOptions = multi.options || [];
    var options = tslib_1.__spreadArrays(rootOptions, exports.globalOptions);
    var sections = [];
    if (multi.logo) {
        sections.push({
            content: multi.logo,
            raw: true
        });
    }
    sections.push({
        header: multi.name,
        content: multi.description
    });
    sections.push({
        header: 'Synopsis',
        content: "$ " + multi.name + " <command> <options>"
    });
    var groups = subCommands.reduce(function (all, command) {
        if (command.group) {
            all.add(command.group);
        }
        return all;
    }, new Set());
    groups.forEach(function (header) {
        var grouped = subCommands.filter(function (c) { return c.group === header; }) || [];
        if (grouped.length > 0) {
            sections.push({
                header: header,
                content: grouped.map(function (command) { return ({
                    name: command.name,
                    description: command.description
                }); })
            });
        }
    });
    if (groups.size === 0) {
        sections.push({
            header: 'Commands',
            content: subCommands.map(function (command) { return ({
                name: command.name,
                description: command.description
            }); })
        });
    }
    options.forEach(function (option) {
        styleTypes(multi, option);
    });
    sections.push({
        header: 'Global Options',
        optionList: options,
        group: ['_none', 'global']
    });
    addFooter(multi, sections);
    console.log(command_line_usage_1.default(sections));
};
var errorReportingStyles = ['exit', 'throw', 'object'];
var reportError = function (error, style) {
    if (style === 'exit') {
        console.log(error);
        process.exit(1);
    }
    if (style === 'throw') {
        throw new Error(error);
    }
    if (style === 'object') {
        return { error: error };
    }
    return;
};
var createList = function (list, transform) {
    var _a = list.map(transform), first = _a[0], rest = _a.slice(1);
    return rest.length > 0 ? rest.join(', ') + " or " + first : first;
};
var reportUnknownFlags = function (args, _a, errorStyle) {
    var unknown = _a[0];
    var unknownStyled = chalk_1.default.redBright("\"" + unknown + "\"");
    var type = unknown.startsWith('-') ? 'flag' : 'command';
    var suggestions = meant_1.default(unknown, args.map(function (a) { return (type === 'flag' ? "--" + a.name : a.name); }));
    var error;
    if (suggestions.length) {
        var list = createList(suggestions, function (s) { return chalk_1.default.greenBright("\"" + s + "\""); });
        error = "Found unknown " + type + " " + unknownStyled + ", did you mean " + list + "?";
    }
    else {
        error = "Found unknown " + type + ": " + unknownStyled;
    }
    return reportError(error, errorStyle);
};
var initializeOptions = function (options) {
    if (options === void 0) { options = []; }
    var args = tslib_1.__spreadArrays(options);
    exports.globalOptions.forEach(function (o) {
        if (!args.find(function (a) { return a.name === o.name; })) {
            args.push(o);
        }
    });
    return args;
};
var parseCommand = function (command, _a) {
    var argv = _a.argv, showHelp = _a.showHelp, _b = _a.error, error = _b === void 0 ? 'exit' : _b, _c = _a.camelCase, camelCase = _c === void 0 ? true : _c;
    var args = initializeOptions(command.options);
    var _d = command_line_args_1.default(args, {
        stopAtFirstUnknown: true,
        camelCase: camelCase,
        argv: argv
    }), global = _d.global, rest = tslib_1.__rest(_d, ["global"]);
    if (rest._unknown) {
        printUsage(command);
        return reportUnknownFlags(args, rest._unknown, error);
    }
    if (global.help && showHelp) {
        printUsage(command);
        return;
    }
    var formatArrayOption = function (option) {
        return typeof option === 'string'
            ? "--" + option
            : option.map(formatArrayOption).join(', ');
    };
    if (command.require) {
        var missing = command.require
            .filter(function (option) {
            return (typeof option === 'string' && !(option in rest._all)) ||
                (typeof option === 'object' &&
                    !option.find(function (o) {
                        return (typeof o === 'string' && o in rest._all) ||
                            (typeof o === 'object' && !o.find(function (op) { return !(op in rest._all); }));
                    })) ||
                // tslint:disable-next-line strict-type-predicates
                (typeof option === 'string' && rest._all[option] === null);
        })
            .map(function (option) {
            return typeof option === 'string'
                ? "--" + option
                : "(" + option.map(formatArrayOption).join(' or ') + ")";
        });
        if (missing.length > 0) {
            var multiple = missing.length > 1;
            printUsage(command);
            return reportError("Missing required arg" + (multiple ? 's' : '') + ": " + missing.join(', '), error);
        }
    }
    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, rest), rest._all), global);
};
/**
 * Create a command line application with all the bells and whistles
 * @param command the command to create an application for
 * @param options Advanced options for the application
 */
function app(command, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.showHelp, showHelp = _c === void 0 ? true : _c, argv = _b.argv, _d = _b.error, error = _d === void 0 ? 'exit' : _d, _e = _b.camelCase, camelCase = _e === void 0 ? true : _e;
    var appOptions = { showHelp: showHelp, argv: argv, error: error, camelCase: camelCase };
    if (!('commands' in command)) {
        return parseCommand(command, appOptions);
    }
    var rootOptions = initializeOptions(command.options);
    var _f = command_line_args_1.default(rootOptions, {
        stopAtFirstUnknown: true,
        camelCase: camelCase,
        argv: argv
    }), global = _f.global, _unknown = _f._unknown, _all = _f._all;
    if (global.help && showHelp) {
        printRootUsage(command);
        return;
    }
    if (_unknown && _unknown.length > 0) {
        var subCommand = command.commands.find(function (c) {
            return Boolean(c.name === _unknown[0]);
        });
        if (subCommand) {
            var options = tslib_1.__spreadArrays((subCommand.options || []), (command.options || []));
            var parsed = app(tslib_1.__assign(tslib_1.__assign({}, subCommand), { options: options }), tslib_1.__assign(tslib_1.__assign({}, appOptions), { argv: _unknown.slice(1) }));
            if (!parsed) {
                return;
            }
            return tslib_1.__assign(tslib_1.__assign({}, parsed), { _command: '_command' in parsed
                    ? tslib_1.__spreadArrays([subCommand.name], arrayify(parsed._command)) : subCommand.name });
        }
        printRootUsage(command);
        return reportUnknownFlags(tslib_1.__spreadArrays(rootOptions, command.commands), _unknown, error);
    }
    if (Object.keys(_all).length > 0) {
        return _all;
    }
    if (showHelp) {
        printRootUsage(command);
    }
    return reportError("No sub-command provided to MultiCommand \"" + command.name + "\"", error);
}
exports.app = app;
//# sourceMappingURL=index.js.map